---
- name: Deploy Application
  hosts: "{{ target_environment }}"
  become: false
  vars:
    # Required variables (passed via extra-vars)
    app_port: "{{ app_port }}"
    flask_env: "{{ flask_env }}"
    container_name: myapp
    
    # Docker configuration
    docker_image: "{{ docker_image }}"
    
    # Health check configuration  
    health_check_retries: 5
    health_check_delay: 10
    health_check_timeout: 60
    
    # Database configuration
    db_name: "{{ db_name }}"
    db_user: "{{ db_user }}"
    db_host: "{{ db_host }}"
    db_password: "{{ db_password }}"
    postgres_port: 5432
    
  tasks:
    # Validate required variables
    - name: Validate required variables
      fail:
        msg: "Required variable {{ item }} is not defined"
      when: item not in vars or vars[item] == "" or vars[item] is undefined
      loop:
        - docker_image
        - app_port
        - flask_env
        - db_host
        - db_name
        - db_user
        - db_password

    # Verify Docker is working
    - name: Check if Docker is installed
      command: which docker
      register: docker_installed
      changed_when: false
      ignore_errors: true

    - name: Fail if Docker is not installed
      fail:
        msg: |
          Docker is not installed on this instance. 
          Please run the setup-environment playbook first:
          ./deploy.sh dev setup-env
      when: docker_installed.rc != 0

    - name: Check Docker service status
      command: systemctl is-active docker
      register: docker_status
      become: true
      changed_when: false
      ignore_errors: true

    - name: Start Docker service if not running
      systemd:
        name: docker
        state: started
        enabled: yes
      become: true
      when: docker_status.stdout != "active"

    - name: Verify Docker daemon is accessible
      command: docker version
      register: docker_version_check
      changed_when: false
      retries: 3
      delay: 5

    - name: Get current container info for backup
      command: docker ps -a --filter "name={{ container_name }}" --format "{{ "{{" }}.Names{{ "}}" }}"
      register: current_container_check
      changed_when: false
      ignore_errors: true

    - name: Pull new Docker image
      command: docker pull {{ docker_image }}
      register: docker_pull_result
      changed_when: "'Downloaded newer image' in docker_pull_result.stdout or 'Status: Image is up to date' not in docker_pull_result.stdout"

    - name: Create backup of current container (for rollback)
      command: docker rename {{ container_name }} {{ container_name }}-backup-{{ ansible_date_time.epoch }}
      when: current_container_check.stdout != ""
      ignore_errors: true

    - name: Stop existing container
      command: docker stop {{ container_name }}
      when: current_container_check.stdout != ""
      ignore_errors: true

    - name: Remove existing container
      command: docker rm {{ container_name }}
      when: current_container_check.stdout != ""
      ignore_errors: true

    - name: Start new application container
      command: >
        docker run -d
        --name {{ container_name }}
        --restart unless-stopped
        -p 80:{{ app_port }}
        -p {{ app_port }}:{{ app_port }}
        -e PORT={{ app_port }}
        -e FLASK_ENV={{ flask_env }}
        -e POSTGRES_USER={{ db_user }}
        -e POSTGRES_PASSWORD={{ db_password }}
        -e POSTGRES_DB={{ db_name }}
        -e POSTGRES_HOST={{ db_host }}
        -e POSTGRES_PORT={{ postgres_port }}
        {{ docker_image }}
      register: container_start_result

    - name: Wait for container to be ready
      wait_for:
        port: "{{ app_port }}"
        host: localhost
        timeout: "{{ health_check_timeout }}"
      ignore_errors: true

    - name: Verify application is responding
      command: curl -f -s -o /dev/null -w "%{http_code}" http://localhost:{{ app_port }}/health
      register: app_health_check
      ignore_errors: true
      retries: "{{ health_check_retries }}"
      delay: "{{ health_check_delay }}"
      until: app_health_check.stdout == "200"

    - name: Set health check result
      set_fact:
        app_health: "{{ app_health_check }}"

    - name: Get final container status
      command: docker ps --filter "name={{ container_name }}" --format "{{ "{{" }}.Status{{ "}}" }}"
      register: final_container_status
      changed_when: false

    - name: Display deployment results
      debug:
        msg:
          - "Container Status: {{ final_container_status.stdout }}"
          - "Image Deployed: {{ docker_image }}"
          - "Application Health Check: {{ 'PASSED' if app_health_check.stdout == '200' else 'FAILED' }}"
          - "Health Check Response Code: {{ app_health_check.stdout | default('N/A') }}"
          - "Access URL: http://{{ ansible_default_ipv4.address }}:{{ app_port }}"

    - name: Show recent container logs
      command: docker logs --tail=20 {{ container_name }}
      register: container_logs
      changed_when: false

    - name: Display recent logs
      debug:
        msg: "{{ container_logs.stdout_lines }}"

    # Automatic rollback on failure
    - name: Rollback on deployment failure
      block:
        - name: Stop failed container
          command: docker stop {{ container_name }}
          ignore_errors: true

        - name: Remove failed container
          command: docker rm {{ container_name }}
          ignore_errors: true

        - name: Check for backup container
          command: docker ps -a --filter "name={{ container_name }}-backup-" --format "{{ "{{" }}.Names{{ "}}" }}"
          register: backup_containers
          changed_when: false

        - name: Restore from backup
          command: |
            BACKUP_NAME=$(echo "{{ backup_containers.stdout }}" | head -1)
            if [ ! -z "$BACKUP_NAME" ]; then
              docker rename "$BACKUP_NAME" {{ container_name }}
              docker start {{ container_name }}
              echo "Rollback completed: restored $BACKUP_NAME"
            else
              echo "No backup found for rollback"
            fi
          when: backup_containers.stdout != ""
          register: rollback_result

        - name: Fail deployment with rollback info
          fail:
            msg: "Deployment failed. {{ 'Automatic rollback completed.' if backup_containers.stdout != '' else 'No backup available for rollback.' }}"

      when: app_health_check.stdout != "200"
